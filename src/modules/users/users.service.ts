import { BadRequestException, Injectable, NotFoundException } from '@nestjs/common';
import { UpdateUserDto } from '../auth/dto/update-user.dto';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { User } from 'src/model/user.entity';
import { PromptDto } from './dto/prompt.dto';
import { HttpService } from '@nestjs/axios';
import { lastValueFrom } from 'rxjs';
import * as FormData from 'form-data';


@Injectable()
export class UsersService {
  constructor(
    @InjectRepository(User)
    private userRepo: Repository<User>,
    private readonly httpService: HttpService
  ) { }
  async create(id: string, promptDto: PromptDto) {
    try {
      const user = await this.userRepo.findOne({ where: { id } });
      const prompt = promptDto.prompt;
      if (!user) {
        throw new NotFoundException("users not found");
      }
      if (!prompt) {
        throw new BadRequestException("Please enter the prompt");
      }
      if (user.creditBalance === 0 || user.creditBalance < 0) {
        return {
          success: false,
          creditBalance: user.creditBalance,
          message: "No Credit Balance"
        }
      } else {
        const API_URL = 'https://clipdrop-api.co/text-to-image/v1';
        const API_KEY = process.env.CLIPDROP_KEY; // Ensure this is set in your environment variables

        const form = new FormData();
        form.append('prompt', prompt);

        try {
          const response = await lastValueFrom(
            this.httpService.post(API_URL, form, {
              headers: {
                'x-api-key': API_KEY,
                ...form.getHeaders(),
              },
              responseType: 'arraybuffer', // To handle binary data
            }),
          );

          // Check if the response is valid
          if (response.data.length <= 2) {
            throw new BadRequestException('Invalid image generated by API');
          }
          // Convert binary data to Base64
          const base64Image = Buffer.from(response.data).toString('base64');
          user.creditBalance = user.creditBalance - 1;
          await this.userRepo.save(user);
          const image = `data:image/png;base64,${base64Image}`
          return {
            creditBalance: user.creditBalance,
            image: image,
            success: true
          }; // Prefix with MIME type
        } catch (error) {
          console.error('Error calling Clipdrop API:', error.response?.data || error.message);
          throw new BadRequestException('Failed to generate image');
        }
      }

    } catch (e) {
      throw new BadRequestException(e);
    }

  }

  findAll() {
    return `This action returns all users`;
  }

  async findOne(id: string) {
    try {
      const user = await this.userRepo.findOne({ where: { id } });
      if (!user) {
        throw new NotFoundException("User not found ");
      }
      return {
        name: user.name,
        credit: user.creditBalance,
        success: true
      }
    } catch (e) {
      throw new BadRequestException(e);
    }

  }

  update(id: number, updateUserDto: UpdateUserDto) {
    return `This action updates a #${id} user`;
  }

  remove(id: number) {
    return `This action removes a #${id} user`;
  }
}
